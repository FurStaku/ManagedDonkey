#pragma once

#include "cseries/cseries.hpp"
#include "networking/logic/logic_matchmaking_desirability.hpp"

class c_hopper_configuration;
class c_network_session;
class c_network_session_membership;

enum e_network_session_matchmaking_composition_build_result
{
	_network_session_matchmaking_composition_build_result_none = 0,
	_network_session_matchmaking_composition_build_result_session_state_not_ready,
	_network_session_matchmaking_composition_build_result_session_no_hopper_configuration,
	_network_session_matchmaking_composition_build_result_session_hopper_mismatch,
	_network_session_matchmaking_composition_build_result_session_no_game_set,
	_network_session_matchmaking_composition_build_result_session_not_ready_no_stats,
	_network_session_matchmaking_composition_build_result_session_not_ready_banned,
	_network_session_matchmaking_composition_build_result_session_not_ready_no_controller,
	_network_session_matchmaking_composition_build_result_invalid_player_count,
	_network_session_matchmaking_composition_build_result_invalid_party_composition,
	_network_session_matchmaking_composition_build_result_invalid_guests_not_allowed,
	_network_session_matchmaking_composition_build_result_invalid_cannot_pick_teams,
	_network_session_matchmaking_composition_build_result_invalid_cannot_even_out_teams,
	_network_session_matchmaking_composition_build_result_invalid_big_party_needs_more_big_parties_before_rabble,
	_network_session_matchmaking_composition_build_result_invalid_big_party_imbalance_exceeded,
	_network_session_matchmaking_composition_build_result_invalid_big_party_count_exceeds_team_count,
	_network_session_matchmaking_composition_build_result_invalid_no_signed_in_player,
	_network_session_matchmaking_composition_build_result_invalid_skill_range,
	_network_session_matchmaking_composition_build_result_success,

	k_network_session_matchmaking_composition_build_result_count,
};

struct s_network_session_player_matchmaking_composition
{
	int32 skill_level;
	int32 experience_rank;
	real32 mu;
	int32 adjusted_skill_level;
};
static_assert(sizeof(s_network_session_player_matchmaking_composition) == 0x10);

struct __declspec(align(4)) s_network_session_party_matchmaking_composition
{
	int32 player_count;
	int32 guest_count;
	int32 average_adjusted_skill_level;
	int32 maximum_skill_level;
	int32 minimum_adjusted_skill_level;
	real32 average_mu;
	int32 average_experience_rank;
	c_network_session_matchmaking_composition_flags flags;
};
static_assert(sizeof(s_network_session_party_matchmaking_composition) == 0x20);

struct s_network_session_matchmaking_composition
{
	s_matchmaking_session_properties session_properties;
	int32 guest_count;
	c_static_array<s_network_session_player_matchmaking_composition, 16> players;
	int32 team_imbalance;
	int32 party_count;
	int32 big_party_count;
	int32 big_party_imbalance;
	c_static_array<s_network_session_party_matchmaking_composition, 17> parties;
	int32 best_host_estimated_downstream_bandwidth_bps;
	int32 best_host_estimated_upstream_bandwidth_bps;
};
static_assert(sizeof(s_network_session_matchmaking_composition) == 0x400);

//extern const char*(&k_network_session_matchmaking_composition_build_results)[k_network_session_matchmaking_composition_build_result_count];
extern const char* k_network_session_matchmaking_composition_build_results[k_network_session_matchmaking_composition_build_result_count];

extern e_network_session_matchmaking_composition_build_result __cdecl network_session_build_matchmaking_composition(const c_network_session* session, s_network_session_matchmaking_composition* composition_out);
extern e_network_session_matchmaking_composition_build_result __cdecl network_session_matchmaking_composition_build_flags(const c_network_session_membership* session_membership, const c_hopper_configuration* hopper_configuration, s_network_session_matchmaking_composition* composition_out);
extern e_network_session_matchmaking_composition_build_result __cdecl network_session_matchmaking_composition_build_guest_statistics(const c_network_session_membership* session_membership, const c_hopper_configuration* hopper_configuration, s_network_session_matchmaking_composition* composition_out);
extern e_network_session_matchmaking_composition_build_result __cdecl network_session_matchmaking_composition_build_local_properties(const c_network_session_membership* session_membership, s_network_session_matchmaking_composition* composition_out);
extern e_network_session_matchmaking_composition_build_result __cdecl network_session_matchmaking_composition_build_party_masks(const c_network_session_membership* session_membership, const c_hopper_configuration* hopper_configuration, s_network_session_matchmaking_composition* composition_out);
extern e_network_session_matchmaking_composition_build_result __cdecl network_session_matchmaking_composition_build_player_party_indices(const c_network_session_membership* session_membership, const c_hopper_configuration* hopper_configuration, s_network_session_matchmaking_composition* composition_out);
extern e_network_session_matchmaking_composition_build_result __cdecl network_session_matchmaking_composition_build_player_statistics(const c_network_session_membership* session_membership, const c_hopper_configuration* hopper_configuration, s_network_session_matchmaking_composition* composition_out);
extern e_network_session_matchmaking_composition_build_result __cdecl network_session_matchmaking_composition_build_players_and_parties(const c_network_session_membership* session_membership, const c_hopper_configuration* hopper_configuration, s_network_session_matchmaking_composition* composition_out);
extern e_network_session_matchmaking_composition_build_result __cdecl network_session_matchmaking_composition_build_session_statistics(const c_network_session_membership* session_membership, s_network_session_matchmaking_composition* composition_out);
extern const char* __cdecl network_session_matchmaking_composition_get_build_result_string(e_network_session_matchmaking_composition_build_result result);
extern bool __cdecl network_session_matchmaking_composition_session_state_ready(const c_network_session_membership* session_membership, const c_hopper_configuration* hopper_configuration, e_network_session_matchmaking_composition_build_result* failure_build_result_out);
extern bool __cdecl network_session_matchmaking_composition_session_state_valid(const c_network_session* session, e_network_session_matchmaking_composition_build_result* result_out);

