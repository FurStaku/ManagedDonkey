#include "networking/transport/transport_endpoint_set_winsock.hpp"

#include "cseries/cseries.hpp"

#include <WinSock2.h>

const char* winsock_error_to_string_no_default(int err)
{
#define ERROR_CASE(code) case (int)code: return #code
    switch (err)
    {
    ERROR_CASE(WSA_INVALID_EVENT);
    ERROR_CASE(WSA_MAXIMUM_WAIT_EVENTS);
    ERROR_CASE(WSA_NOT_ENOUGH_MEMORY);
    ERROR_CASE(WSA_INVALID_HANDLE);
    ERROR_CASE(WSA_WAIT_FAILED);
    ERROR_CASE(WSA_INVALID_PARAMETER);
    ERROR_CASE(WSA_WAIT_IO_COMPLETION);
    ERROR_CASE(WSA_WAIT_TIMEOUT);
    ERROR_CASE(WSA_OPERATION_ABORTED);
    ERROR_CASE(WSA_IO_INCOMPLETE);
    ERROR_CASE(WSA_IO_PENDING);
    ERROR_CASE(WSAEINTR);
    ERROR_CASE(WSAEBADF);
    ERROR_CASE(WSAEACCES);
    ERROR_CASE(WSAEFAULT);
    ERROR_CASE(WSAEINVAL);
    ERROR_CASE(WSAEMFILE);
    ERROR_CASE(WSAEWOULDBLOCK);
    ERROR_CASE(WSAEINPROGRESS);
    ERROR_CASE(WSAEALREADY);
    ERROR_CASE(WSAENOTSOCK);
    ERROR_CASE(WSAEDESTADDRREQ);
    ERROR_CASE(WSAEMSGSIZE);
    ERROR_CASE(WSAEPROTOTYPE);
    ERROR_CASE(WSAENOPROTOOPT);
    ERROR_CASE(WSAEPROTONOSUPPORT);
    ERROR_CASE(WSAESOCKTNOSUPPORT);
    ERROR_CASE(WSAEOPNOTSUPP);
    ERROR_CASE(WSAEPFNOSUPPORT);
    ERROR_CASE(WSAEAFNOSUPPORT);
    ERROR_CASE(WSAEADDRINUSE);
    ERROR_CASE(WSAEADDRNOTAVAIL);
    ERROR_CASE(WSAENETDOWN);
    ERROR_CASE(WSAENETUNREACH);
    ERROR_CASE(WSAENETRESET);
    ERROR_CASE(WSAECONNABORTED);
    ERROR_CASE(WSAECONNRESET);
    ERROR_CASE(WSAENOBUFS);
    ERROR_CASE(WSAEISCONN);
    ERROR_CASE(WSAENOTCONN);
    ERROR_CASE(WSAESHUTDOWN);
    ERROR_CASE(WSAETOOMANYREFS);
    ERROR_CASE(WSAETIMEDOUT);
    ERROR_CASE(WSAECONNREFUSED);
    ERROR_CASE(WSAELOOP);
    ERROR_CASE(WSAENAMETOOLONG);
    ERROR_CASE(WSAEHOSTDOWN);
    ERROR_CASE(WSAEHOSTUNREACH);
    ERROR_CASE(WSAENOTEMPTY);
    ERROR_CASE(WSAEPROCLIM);
    ERROR_CASE(WSAEUSERS);
    ERROR_CASE(WSAEDQUOT);
    ERROR_CASE(WSAESTALE);
    ERROR_CASE(WSAEREMOTE);
    ERROR_CASE(WSASYSNOTREADY);
    ERROR_CASE(WSAVERNOTSUPPORTED);
    ERROR_CASE(WSANOTINITIALISED);
    ERROR_CASE(WSAEDISCON);
    ERROR_CASE(WSAENOMORE);
    ERROR_CASE(WSAECANCELLED);
    ERROR_CASE(WSAEINVALIDPROCTABLE);
    ERROR_CASE(WSAEINVALIDPROVIDER);
    ERROR_CASE(WSAEPROVIDERFAILEDINIT);
    ERROR_CASE(WSASYSCALLFAILURE);
    ERROR_CASE(WSASERVICE_NOT_FOUND);
    ERROR_CASE(WSATYPE_NOT_FOUND);
    ERROR_CASE(WSA_E_NO_MORE);
    ERROR_CASE(WSA_E_CANCELLED);
    ERROR_CASE(WSAEREFUSED);
    ERROR_CASE(WSAHOST_NOT_FOUND);
    ERROR_CASE(WSATRY_AGAIN);
    ERROR_CASE(WSANO_RECOVERY);
    ERROR_CASE(WSANO_DATA);
    ERROR_CASE(WSA_QOS_RECEIVERS);
    ERROR_CASE(WSA_QOS_SENDERS);
    ERROR_CASE(WSA_QOS_NO_SENDERS);
    ERROR_CASE(WSA_QOS_NO_RECEIVERS);
    ERROR_CASE(WSA_QOS_REQUEST_CONFIRMED);
    ERROR_CASE(WSA_QOS_ADMISSION_FAILURE);
    ERROR_CASE(WSA_QOS_POLICY_FAILURE);
    ERROR_CASE(WSA_QOS_BAD_STYLE);
    ERROR_CASE(WSA_QOS_BAD_OBJECT);
    ERROR_CASE(WSA_QOS_TRAFFIC_CTRL_ERROR);
    ERROR_CASE(WSA_QOS_GENERIC_ERROR);
    }
    return NULL;

#undef ERROR_CASE
}

const char* winsock_error_to_string(int err)
{
	if (const char* result = winsock_error_to_string_no_default(err))
		return result;

	static char errbuf[256]{};
	return csnzprintf(errbuf, sizeof(errbuf), "<unknown winsock error %d>", err);
}

