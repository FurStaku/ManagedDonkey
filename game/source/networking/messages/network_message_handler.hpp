#pragma once

class c_network_channel;
class c_network_link;
class c_network_message_type_collection;
class c_network_message_gateway;
class c_network_observer;
class c_network_session_manager;
struct transport_address;

struct s_network_message_ping;
struct s_network_message_pong;
struct s_network_message_broadcast_search;
struct s_network_message_broadcast_reply;
struct s_network_message_connect_request;
struct s_network_message_connect_refuse;
struct s_network_message_connect_establish;
struct s_network_message_connect_closed;
struct s_network_message_join_request;
struct s_network_message_peer_connect;
struct s_network_message_join_abort;
struct s_network_message_join_refuse;
struct s_network_message_leave_session;
struct s_network_message_leave_acknowledge;
struct s_network_message_session_disband;
struct s_network_message_session_boot;
struct s_network_message_host_decline;
struct s_network_message_peer_establish;
struct s_network_message_time_synchronize;
struct s_network_message_membership_update;
struct s_network_message_peer_properties;
struct s_network_message_delegate_leadership;
struct s_network_message_boot_machine;
struct s_network_message_player_add;
struct s_network_message_player_refuse;
struct s_network_message_player_remove;
struct s_network_message_player_properties;
struct s_network_message_parameters_update;
struct s_network_message_parameters_request;
struct s_network_message_view_establishment;
struct s_network_message_player_acknowledge;
struct s_network_message_synchronous_update;
struct s_network_message_synchronous_playback_control;
struct s_network_message_synchronous_actions;
struct s_network_message_synchronous_acknowledge;
struct s_network_message_synchronous_gamestate;
struct s_network_message_distributed_game_results;
struct s_network_message_test;
struct s_network_message_text_chat;
struct s_network_message_directed_search;

union network_message_converter_t
{
	const void* message_storage;
	const s_network_message_ping* message_ping;
	const s_network_message_pong* message_pong;
	const s_network_message_broadcast_search* message_broadcast_search;
	const s_network_message_broadcast_reply* message_broadcast_reply;
	const s_network_message_connect_request* message_connect_request;
	const s_network_message_connect_refuse* message_connect_refuse;
	const s_network_message_connect_establish* message_connect_establish;
	const s_network_message_connect_closed* message_connect_closed;
	const s_network_message_join_request* message_join_request;
	const s_network_message_peer_connect* message_peer_connect;
	const s_network_message_join_abort* message_join_abort;
	const s_network_message_join_refuse* message_join_refuse;
	const s_network_message_leave_session* message_leave_session;
	const s_network_message_leave_acknowledge* message_leave_acknowledge;
	const s_network_message_session_disband* message_session_disband;
	const s_network_message_session_boot* message_session_boot;
	const s_network_message_host_decline* message_host_decline;
	const s_network_message_peer_establish* message_peer_establish;
	const s_network_message_time_synchronize* message_time_synchronize;
	const s_network_message_membership_update* message_membership_update;
	const s_network_message_peer_properties* message_peer_properties;
	const s_network_message_delegate_leadership* message_delegate_leadership;
	const s_network_message_boot_machine* message_boot_machine;
	const s_network_message_player_add* message_player_add;
	const s_network_message_player_refuse* message_player_refuse;
	const s_network_message_player_remove* message_player_remove;
	const s_network_message_player_properties* message_player_properties;
	const s_network_message_parameters_update* message_parameters_update;
	const s_network_message_parameters_request* message_parameters_request;
	const s_network_message_view_establishment* message_view_establishment;
	const s_network_message_player_acknowledge* message_player_acknowledge;
	const s_network_message_synchronous_update* message_synchronous_update;
	const s_network_message_synchronous_playback_control* message_synchronous_playback_control;
	const s_network_message_synchronous_actions* message_synchronous_actions;
	const s_network_message_synchronous_acknowledge* message_synchronous_acknowledge;
	const s_network_message_synchronous_gamestate* message_synchronous_gamestate;
	const s_network_message_distributed_game_results* message_distributed_game_results;
	const s_network_message_test* message_test;
	const s_network_message_text_chat* message_text_chat;
	const s_network_message_directed_search* message_directed_search;
};

class c_network_message_handler
{
public:
	void destroy_handler();
	void handle_boot_machine(c_network_channel* channel, const s_network_message_boot_machine* message);
	void handle_broadcast_reply(const transport_address* address, const s_network_message_broadcast_reply* message);
	void handle_broadcast_search(const transport_address* address, const s_network_message_broadcast_search* message);
	void handle_channel_message(c_network_channel* channel, e_network_message_type message_type, int32 message_storage_size, const void* message_storage);
	void handle_connect_closed(c_network_channel* channel, const s_network_message_connect_closed* message);
	void handle_connect_establish(c_network_channel* channel, const s_network_message_connect_establish* message);
	void handle_connect_refuse(c_network_channel* channel, const s_network_message_connect_refuse* message);
	void handle_connect_request(const transport_address* address, const s_network_message_connect_request* message);
	void handle_delegate_leadership(c_network_channel* channel, const s_network_message_delegate_leadership* message);
	void handle_distributed_game_results(c_network_channel* channel, const s_network_message_distributed_game_results* message);
	void handle_host_decline(c_network_channel* channel, const s_network_message_host_decline* message);
	void handle_join_abort(const transport_address* address, const s_network_message_join_abort* message);
	void handle_join_refuse(const transport_address* address, const s_network_message_join_refuse* message);
	void handle_join_request(const transport_address* address, const s_network_message_join_request* message);
	void handle_leave_acknowledge(const transport_address* address, const s_network_message_leave_acknowledge* message);
	void handle_leave_session(const transport_address* address, const s_network_message_leave_session* message);
	void handle_membership_update(c_network_channel* channel, const s_network_message_membership_update* message);
	void handle_out_of_band_message(const transport_address* address, e_network_message_type message_type, int32 message_storage_size, const void* message_storage);
	void handle_parameters_request(c_network_channel* channel, const s_network_message_parameters_request* message);
	void handle_parameters_update(c_network_channel* channel, const s_network_message_parameters_update* message);
	void handle_peer_connect(const transport_address* address, const s_network_message_peer_connect* message);
	void handle_peer_establish(c_network_channel* channel, const s_network_message_peer_establish* message);
	void handle_peer_properties(c_network_channel* channel, const s_network_message_peer_properties* message);
	void handle_ping(const transport_address* address, const s_network_message_ping* message);
	void handle_player_acknowledge(c_network_channel* channel, const s_network_message_player_acknowledge* message);
	void handle_player_add(c_network_channel* channel, const s_network_message_player_add* message);
	void handle_player_properties(c_network_channel* channel, const s_network_message_player_properties* message);
	void handle_player_refuse(c_network_channel* channel, const s_network_message_player_refuse* message);
	void handle_player_remove(c_network_channel* channel, const s_network_message_player_remove* message);
	void handle_pong(const transport_address* address, const s_network_message_pong* message);
	void handle_session_boot(const transport_address* address, const s_network_message_session_boot* message);
	void handle_session_disband(const transport_address* address, const s_network_message_session_disband* message);
	void handle_synchronous_acknowledge(c_network_channel* channel, const s_network_message_synchronous_acknowledge* message);
	void handle_synchronous_actions(c_network_channel* channel, const s_network_message_synchronous_actions* message);
	void handle_synchronous_client_ready(c_network_channel* channel);
	void handle_synchronous_gamestate(c_network_channel* channel, const s_network_message_synchronous_gamestate* message, int32 chunk_size, const void* chunk_data);
	void handle_synchronous_playback_control(c_network_channel* channel, const s_network_message_synchronous_playback_control* message);
	void handle_synchronous_update(c_network_channel* channel, const s_network_message_synchronous_update* message);
	void handle_time_synchronize(const transport_address* address, const s_network_message_time_synchronize* message);
	void handle_view_establishment(c_network_channel* channel, const s_network_message_view_establishment* message);
	bool initialize_handler(c_network_link* link, const c_network_message_type_collection* message_types, c_network_message_gateway* message_gateway);
	void register_observer(c_network_observer* observer);
	void register_session_manager(c_network_session_manager* session_manager);
	void handle_test(c_network_channel* channel, const s_network_message_test* message);
	void handle_directed_search(const transport_address* address, const s_network_message_directed_search* message);
	void handle_text_chat(c_network_channel* channel, const s_network_message_text_chat* message);


//protected:
	bool m_initialized;
	c_network_link* m_link;
	const c_network_message_type_collection* m_message_types;
	c_network_message_gateway* m_message_gateway;
	c_network_observer* m_observer;
	c_network_session_manager* m_session_manager;
};
static_assert(sizeof(c_network_message_handler) == 0x18);

