#include "objects/scenery.hpp"

//.text:00BB84C0 ; void __cdecl scenery_animation_finish(int32)
//.text:00BB85B0 ; int16 __cdecl scenery_animation_get_ticks_remaining_for_scripting(int32)
//.text:00BB8680 ; void __cdecl scenery_animation_start(int32, int32, int32)
//.text:00BB86A0 ; void __cdecl scenery_animation_start_at_frame(int32, int32, int32, int16)
//.text:00BB86C0 ; void __cdecl scenery_animation_start_at_frame_loop(int32, int32, int32, int16)
//.text:00BB86E0 ; void __cdecl scenery_animation_start_idle(int32)
//.text:00BB8760 ; void __cdecl scenery_animation_start_loop(int32, int32, int32)
//.text:00BB8780 ; bool __cdecl scenery_animation_start_private(int32, int32, int32, int16, int32, bool, bool)
//.text:00BB88B0 ; void __cdecl scenery_animation_start_relative(int32, int32, int32, int32)
//.text:00BB88D0 ; void __cdecl scenery_animation_start_relative(int32, c_animation_id, real_matrix4x3*)
//.text:00BB8950 ; void __cdecl scenery_animation_start_relative_at_frame(int32, int32, int32, int32, int16)
//.text:00BB8970 ; void __cdecl scenery_animation_start_relative_loop(int32, int32, int32, int32)
//.text:00BB8990 ; bool __cdecl scenery_compute_activation(int32, s_game_cluster_bit_vectors const*, bool*)
//.text:00BB8A70 ; void __cdecl scenery_delete(int32)
//.text:00BB8A80 ; void __cdecl scenery_detach_from_physics(int32)
//.text:00BB8A90 ; int32 __cdecl scenery_get_lightmap_object_index(c_object_identifier*, int32)
//.text:00BB8AA0 ; int32 __cdecl scenery_get_mopp_index(int32)
//.text:00BB8B00 ; bool __cdecl scenery_has_physics_model(int32)
//.text:00BB8B20 ; void __cdecl scenery_initialize_for_new_structure_bsp(int32)
//.text:00BB8B30 ; void __cdecl scenery_initialize_lightmap_object_index(int32)
//.text:00BB8BE0 ; bool __cdecl scenery_is_fixed_rigid_body(int32)
//.text:00BB8D40 ; int16 __cdecl scenery_lightmapping_policy(int32)
//.text:00BB8D80 ; void __cdecl scenery_move(int32)
//.text:00BB8DD0 ; bool __cdecl scenery_new(int32, object_placement_data*, bool*)
//.text:00BB8E90 ; int16 __cdecl scenery_pathfinding_policy(int32, s_scenario_scenery*)
//.text:00BB8F00 ; void __cdecl scenery_place(int32, s_scenario_scenery*)
//.text:00BB8F90 ; bool __cdecl scenery_play_animation_id(int32, c_animation_id, uint32, int32)
//.text:00BB90F0 ; void __cdecl scenery_preprocess_root_node_matrix(int32, real_matrix4x3*)
//.text:00BB9170 ; void __cdecl scenery_render_debug(int32)
//.text:00BB9180 ; bool __cdecl scenery_update(int32)

